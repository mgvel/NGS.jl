#!/usr/bin/env julia

using GZip

exomf = ARGS[1] # Exome file e.g: Exome_region.bed
vcf  = ARGS[2] # Variant Calling file e.g: chr3.vcf.gz

"""
Read Consensus files generated by running consensus.jl
Looking for variants present in  atleast 10% of the samples
and returns the list of Variant positions
"""

function read(file)
    if ismatch(r".gz$", file)   # Gzipped .gz files
		f = GZip.open(file)
		lines = readlines(f)
		close(f)
    else
		f = open(file)
		lines = readlines(f)
		close(f)
	end
	return lines
end

function expand(locci)
    list = []
    pos = split(locci, ':')
        chr = pos[1]
        region = split(pos[2], '-')
        n = parse(Int64, region[1])
        while n <= parse(Int64, region[end])
            #out = "$chr" * ":" * "$n"
            push!(list, n)
            n +=  1
        end
    return list
end

function readBED(bed_file, chr::AbstractString=chr)
    pos = []
    bed = read(bed_file)
    for line in bed
        bed = split(line, '\t')
        chrm = replace(bed[1], "chr", "")
        if chrm == chr
            start, last = bed[2], bed[3]
            chroms = "$chrm" * ":" * "$start" * "-" * "$last"
            region = expand(chroms)
            append!(pos, region)
        end
    end
    pos = unique(pos)
    return pos
end

#exompos = readBED(exomf)

"""
Reading VCF files and comparing each position with positions
retrieved from previous function checking for exomic region
and returning filtered variants in .vcf format
"""
function filterVCF(vcf_path, exomf)
    vars = []
	lines = read(vcf_path)
	chr = split(lines[end], '\t')[1]
	exomepos = readBED(exomf, chr)
	println(lines[1])


	for line = lines[2:end]
        snp = parse(Int, split(line, '\t')[2])
        push!(vars, snp)
    end
    unique(vars)
    intronic = setdiff(Set(vars), Set(exomepos))

    println(length(intronic))

    for pos = exomepos[1:end], line = lines[2:end]
        cols = split(line, '\t')
        if pos == cols[2]
            println(line)
        end
    end

end

filterVCF(vcf, exomf)
